#include <iostream>
#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include "Individual.h"
#include "Population.h"
#include "MutationProbabilityTable.h"
#include "armadillo.h"
#include "TableFandCR.h"

//TODO raro que el bestIndividual siempre sea el mismo al principio
//problema el mutation size ha de ser divisor del population_size_init



void cec14_test_func(double *, double *, int, int, int);

double *OShift, *M, *y, *z, *x_bound;
int ini_flag = 0, n_flag, func_flag, *SS;

using namespace std;
using namespace arma;

//static const double F = 1.7; //mutate factor
//static const double F = 0.7; //mutate factor
//static const double CR = 0.15; //Crossover factor
//static const double CR = 0.15; //Crossover factor

// GS group size = population_size = number of groups

static const int AMOUNT_OF_GROUPS = 10;
static const int GROUP_SIZE = Population::POPULATION_SIZE_INIT / AMOUNT_OF_GROUPS;
static const double EVAPORATION_RATE = 0.05;
static const int LP_RAM = 30;
static const int UPPER_BOUND = 100;
static const int LOWER_BOUND = -100;
const double EPSILON = pow(10.0, -8);
const int MAX_FITNESS_EVALUATIONS = Individual::DIMENSION * 10000;

typedef Individual (*MutationFunctions)(vector<Individual> current_population, int ind, vector<vector<double>> mean_cr_f_values_to_use, double p);


//Return random value with uniform distribution [0, 1)
double rand_double() {
    return (double) rand() / (double) RAND_MAX;
}

//TODO: cheeck If random functions are working
/*
  Return random value from Cauchy distribution with mean "mu" and variance "gamma"
  F calculation
  Cauchy(meanFi,0.05) is a random value generated by the Cauchy distribution with meanFi as its mean and std equal to 0.05
  If Fi is greater than 1 then it is set to 1. On the contrary, Fi is generated againifitissmallerthan0
*/
double rand_cauchy(double mu, double gamma) {

    double result = 0.0;
    result = mu + gamma * tan(M_PI * (rand_double() - 0.5));
    while (result < 0.0) {
        result = mu + gamma * tan(M_PI * (rand_double() - 0.5));
    }
    if (result > 1.0) result = 1.0;

    return result;
}


/*
  Return random value from normal distribution with mean "mu" and variance "gamma"
  CR calculation
  CRi issetto0or1ifitisoutside the range [0, 1]
*/
double rand_gauss(double mu, double sigma) {

    double result = 0.0;
    result = mu + sigma * sqrt(-2.0 * log(rand_double())) * sin(2.0 * M_PI * rand_double());
    if (result < 0.0) result = 0.0;
    if (result > 1.0) result = 1.0;

    return result;

}


Population selection(Population current_population, Population offspring, int number_of_function) {
    Population final_population = Population(current_population.getPopulationSize());
    vector<Individual> current_population_vector = current_population.getIndividuals();
    vector<Individual> offspring_vector = offspring.getIndividuals();


    //cout << "selection function";
    //TODO cambiar el numero de individuos en funcion del population size
    vector<Individual> final_population_vector = final_population.getIndividuals();

    for (int i = 0; i < current_population.getPopulationSize(); i++) {
        if (current_population_vector[i].betterFitnessThan(offspring_vector[i], number_of_function)) {
            final_population_vector[i].setComponents(current_population_vector[i].getComponents());
            final_population_vector[i].setFitness(current_population_vector[i].getFitness());
        } else {
            final_population_vector[i].setComponents(offspring_vector[i].getComponents());
            final_population_vector[i].setFitness(offspring_vector[i].getFitness());
        }
        final_population_vector[i].setGroup(current_population_vector[i].getGroup());
    }

    final_population.setIndividuals(final_population_vector);
    return final_population;
}

//TODO problem with population_size of offspring
//binomial crossover
Population crossover(Population current_population, Population mutated_population, vector<vector<double>> mean_cr_f_values_to_use) {
    Population offspring = Population(current_population.getPopulationSize());

    vector<Individual> current_population_vector = current_population.getIndividuals();
    vector<Individual> mutated_population_vector = mutated_population.getIndividuals();
    vector<Individual> offspring_vector = offspring.getIndividuals();

    float random_value;
    int j_random;
    double value;

    //por cada individuo de la poblacion
    for (int individual_i = 0; individual_i < current_population.getPopulationSize(); individual_i++) {
        //generamos escogemos una componente
        j_random = (random() % current_population.getPopulationSize());
        //por cada componente
        for (int component_i = 0; component_i < Individual::DIMENSION; component_i++) {
            // generar un numero random de 0 a 1
            random_value = static_cast <float> (rand()) / static_cast <float> (RAND_MAX);

            // si el numero es menor que CR o es el indice j entonces es la componente mutada
            // si es mayor que CR y no es j entonces es la componente original
            if (random_value <= mean_cr_f_values_to_use[individual_i][0] or component_i == j_random) {
                value = mutated_population_vector[individual_i].getComponent(component_i);
                offspring_vector[individual_i].setComponent(component_i, value);

                //offspring_vector[individual_i].setGroup(current_population_vector[individual_i].getGroup());
            } else {
                value = current_population_vector[individual_i].getComponent(component_i);
                offspring_vector[individual_i].setComponent(component_i, value);

                //offspring_vector[individual_i].setGroup(current_population_vector[individual_i].getGroup());
            }
        }
    }


    offspring.setIndividuals(offspring_vector);
    offspring.recalculateFitness();

    return offspring;

}


/*
 * realiza la mutaci贸n de una poblaci贸n y devuelve el el vector mutado
 */



Individual DE_PBest_1_ind(vector<Individual> current_population_vector, int ind, vector<vector<double>> mean_cr_f_values_to_use, double p) {
    vector<Individual> mutated_vector;

    Population current_population = Population(current_population_vector.size());
    current_population.setIndividuals(current_population_vector);

    vector<double> pbest_individual_components = current_population.pBestIndividual(p).getComponents();

    Individual ind_to_return = Individual();

    int N_X_r1, N_X_r2;
    double CN_X_r1, CN_X_r2, CN_X_pbest;

    double value;

//Por cada individuo de la poblaci贸n
//escogemos 3 elementos aleatoriamente de la poblacion
    N_X_r1 = (rand() % current_population_vector.size());
    N_X_r2 = (rand() % current_population_vector.size());


    //Por cada componente del individio
    for (int component_i = 0; component_i < Individual::DIMENSION; component_i++) {

        CN_X_r1 = current_population_vector[N_X_r1].getComponents()[component_i];
        CN_X_r2 = current_population_vector[N_X_r2].getComponents()[component_i];
        CN_X_pbest = pbest_individual_components[component_i];


        value = CN_X_pbest + mean_cr_f_values_to_use[ind][1] * (CN_X_r1 - CN_X_r2);

        ind_to_return.setComponent(component_i, value);
    }

    return ind_to_return;
}

Individual DE_currentToPBest_1_ind(vector<Individual> current_population_vector, int ind, vector<vector<double>> mean_cr_f_values_to_use, double p) {
    vector<Individual> mutated_vector;

    Population current_population = Population(current_population_vector.size());
    current_population.setIndividuals(current_population_vector);
    vector<double> pbest_individual_components = current_population.pBestIndividual(p).getComponents();

    Individual ind_to_return = Individual();

    int N_X_r1, N_X_r2;
    double CN_X_r1, CN_X_r2, CN_X_pbest, CN_X_i;

    double value;

    //Por cada individuo de la poblaci贸n
    //escogemos 3 elementos aleatoriamente de la poblacion
    N_X_r1 = (rand() % current_population_vector.size());
    N_X_r2 = (rand() % current_population_vector.size());


    //Por cada componente del individio
    for (int component_i = 0; component_i < Individual::DIMENSION; component_i++) {

        CN_X_i = current_population_vector[ind].getComponents()[component_i];

        CN_X_r1 = current_population_vector[N_X_r1].getComponents()[component_i];
        CN_X_r2 = current_population_vector[N_X_r2].getComponents()[component_i];
        CN_X_pbest = pbest_individual_components[component_i];

        value = CN_X_i + mean_cr_f_values_to_use[ind][1] * (CN_X_pbest - CN_X_i + CN_X_r1 - CN_X_r2);

        ind_to_return.setComponent(component_i, value);
    }

    return ind_to_return;
}


//TODO to be tested
Population mutate_RAM_JAPDE(Population current_population, vector<int> mutation_vector, vector<vector<double>> mean_cr_f_values_to_use, double p) {
    Population offspring = Population(current_population.getPopulationSize());
    vector<Individual> current_population_vector = current_population.getIndividuals();
    vector<Individual> offspring_vector;


    for (int idx = 0; idx < current_population.getPopulationSize(); idx++) {
        offspring_vector.insert(offspring_vector.end(), Individual());
    }
    MutationFunctions mutation_functions_ram_japde[]{
            DE_PBest_1_ind,
            DE_currentToPBest_1_ind
    };

    for (int ind = 0; ind < current_population.getPopulationSize(); ind++) {
        // SELECTION OF MUTATION DEPENDING ON THE NUMBER
        offspring_vector[ind] = mutation_functions_ram_japde[mutation_vector[ind]](current_population_vector, ind, mean_cr_f_values_to_use, p);
        offspring_vector[ind].setGroup(current_population.getIndividual(ind).getGroup());
    }

    offspring.setIndividuals(offspring_vector);
    offspring.recalculateFitness();
    return offspring;

}

//TODO check wheel_roulette
int wheel_roulette(vector<double> probabilities, double acc_prob_of_group) {
//Create a reandom and loop over the array of probabilities until findin the corrent number

    double random_value;
    double accumulated_probability;
    int mutation_strategy;

    //rand() --  1
    // tanto para max = max * random() / 1

    random_value = (double) rand() / RAND_MAX;
    random_value = 0 + random_value * (acc_prob_of_group - 0);

    mutation_strategy = 0;
    accumulated_probability = probabilities[mutation_strategy];


    while (accumulated_probability < random_value) {
        mutation_strategy += 1;
        accumulated_probability = accumulated_probability + probabilities[mutation_strategy];
    }

    return mutation_strategy;
}

vector<int> selectMutationStrategy(MutationProbabilityTable mutation_probability_table, int number_of_individuals, Population current_population) {
    vector<int> mutation_to_use_vector(number_of_individuals, -1);
    int group = -1;
    vector<double> probability_per_mut_str_of_the_group(mutation_probability_table.getNumberOfGroups(), 0);
    double max_prob_of_the_group;

    //for each individual


    //obtenemos el individuo
    for (int individual = 0; individual < mutation_to_use_vector.size(); individual++) {
        // mirar a que grupo pertenece
        // coger el vector de probabilidades del grupo


        group = current_population.getIndividual(individual).getGroup();
        max_prob_of_the_group = mutation_probability_table.getAccumulatedProbabilityFromGroup(group);
        probability_per_mut_str_of_the_group = mutation_probability_table.getProbabilityFromGroup(group);
        mutation_to_use_vector[individual] = wheel_roulette(probability_per_mut_str_of_the_group, max_prob_of_the_group);


    }
    return mutation_to_use_vector;

}


vector<vector<double>>
selectMeanCRFValues(TableFandCR table_mean_cr_f_prob, vector<vector<double>> mean_cr_f_values_to_use, int number_of_individuals,
                    Population current_population) {
    std::vector<std::vector<double>> mean_cr_f_values_to_use_to_return(current_population.getPopulationSize(), std::vector<double>(2, -1));

    vector<double> vector_accumulated_prob_per_col(TableFandCR::AMOUNT_OF_POSSIBLE_F, -1.0);
    double sum_vector_of_accumulated_prob_per_col = 0.0;
    double col_selected = -1;

    vector<double> vector_probability_per_cr_col_selected(TableFandCR::AMOUNT_OF_POSSIBLE_F, -1.0);
    double accumulated_value_col_selected;
    double row_selected = -1;
    //get random_value from 0 to cumulative

    //rowToSearch = wheel_roulette()

    for (int ind = 0; ind < number_of_individuals; ind++) {
        // obtener el vector de las probabilidades accumuladas de cada columna (f)
        for (int col = 0; col < TableFandCR::AMOUNT_OF_POSSIBLE_F; col++) {

            vector_accumulated_prob_per_col[col] = table_mean_cr_f_prob.getAccumulatedProbabilityFromCol(col);
        }
        // obtener el max acumulado de las probabilidades acumuladas de cada columna
        sum_vector_of_accumulated_prob_per_col = accumulate(vector_accumulated_prob_per_col.begin(), vector_accumulated_prob_per_col.end(), 0.0);
        // hacer ruleta para encontrar el elemento de la columna (f) que tenemos que usar
        col_selected = wheel_roulette(vector_accumulated_prob_per_col, sum_vector_of_accumulated_prob_per_col);


        // obtener el vector de las probabilidades de la columna (f)
        vector_probability_per_cr_col_selected = table_mean_cr_f_prob.getProbabilityFromCol(col_selected);
        // obtener el max acumulado de la columna
        accumulated_value_col_selected = table_mean_cr_f_prob.getAccumulatedProbabilityFromCol(col_selected);
        //hacer ruleta para encontrar el elemento de la columna (cr) que tenemos que usar
        row_selected = wheel_roulette(vector_probability_per_cr_col_selected, accumulated_value_col_selected);


        //dividir entre 10 el cr y guardarlo
        //dividir entre 10 el f y guardarlo

        row_selected = (double) row_selected / 10;
        col_selected = (double) col_selected / 10;

        mean_cr_f_values_to_use_to_return[ind][0] = row_selected;
        mean_cr_f_values_to_use_to_return[ind][1] = col_selected;


    }

    return mean_cr_f_values_to_use_to_return;

}


void updateTriesAndSuccessMutTable(Population current_population, Population offspring, MutationProbabilityTable *mutation_probability_table,
                                   vector<int> mutation_strategy_to_use, int number_of_function) {
    int group;
    for (int ind = 0; ind < current_population.getPopulationSize(); ind++) {
        group = current_population.getIndividual(ind).getGroup();
        mutation_probability_table->addTries(group, mutation_strategy_to_use[ind], 1);
        if (offspring.getIndividual(ind).betterFitnessThan(current_population.getIndividual(ind), number_of_function)) {
            mutation_probability_table->addSuccess(group, mutation_strategy_to_use[ind], 1);

        }
    }
}

//TODO check if it works

void updateTriesAndSuccessMeanValuesCRF(Population current_population, Population offspring, TableFandCR *mean_values_cr_f,
                                        vector<vector<double>> mean_cr_f_values_to_use, int number_of_function) {
    int cr_value_to_assign;
    int f_value_to_assign;

    for (int ind = 0; ind < current_population.getPopulationSize(); ind++) {
        cr_value_to_assign = round(mean_cr_f_values_to_use[ind][0] * 10.0);
        f_value_to_assign = round(mean_cr_f_values_to_use[ind][1] * 10.0);
        mean_values_cr_f->addTries(cr_value_to_assign, f_value_to_assign, 1);
        if (offspring.getIndividual(ind).betterFitnessThan(current_population.getIndividual(ind), number_of_function)) {
            mean_values_cr_f->addSuccess(cr_value_to_assign, f_value_to_assign, 1);
        }
    }
}


vector<double> calculateCECFitness(Population current_population, int dimension, int population_size, int number_of_function) {
    vector<double> fitness_vector(population_size, 0);
    rowvec fitness;
    fitness = ones<rowvec>(population_size);
    //cout << fitness;
    mat mat_population = Population::populationToMat(current_population);
    cec14_test_func(mat_population.memptr(), fitness.memptr(), dimension, population_size, number_of_function);
    for (int i = 0; i < population_size; i++) {
        fitness_vector[i] = fitness(i);
    }

    //cout << fitness;
    return fitness_vector;


}

bool isOptimumIndividualFound(Population population_to_evaluate, int number_of_function) {
    if ((population_to_evaluate.bestIndividual().getErrorToOptimum(number_of_function)) > EPSILON)
        return false;
    return true;
}

double calculateP(int evaluations_done, int population_size) {
    double p = 0;
    double first_part = 0;
    double second_part = 0;

    first_part = (1 - ((double) evaluations_done / MAX_FITNESS_EVALUATIONS));
    second_part = 1 / (double) Population::POPULATION_SIZE_INIT;
    p = max(first_part, second_part);
    return p;

}

int calculatePMax() {
    int p_max = 1;
    int N_i = Population::POPULATION_SIZE_INIT;
    while (N_i > Population::POPULATION_SIZE_MIN - 1) {
        N_i = N_i / 2;
        p_max = p_max + 1;
    }
    return p_max - 1;
}

int calculateFitnessOperations(int p_max) {
    int fitness_operations = (MAX_FITNESS_EVALUATIONS / p_max);
    return fitness_operations;
}

int calculateGenerations(int fitness_operations_per_p, int population_size) {
    int generations = (fitness_operations_per_p / population_size);
    return generations;
}


/*
 * Inicializar poblacion con valores de -100 a 100
 * Calcular fitness
 * Iterar hasta que se consigan el m谩ximo de Iteraciones o arrives to the optimum value
     * hacer mutaci贸n
     * hacer crossover
     * Calculcar fitness
     * hacer selecci贸n
     * print best individual
 *
 */

int main() {


    cout << "HSPR!!!\n";

    //Para hacerlo random, descomentar
    //srand((unsigned) time(0));

    int number_of_function = 18;
    int number_of_fit_eva = 0;

    //Calculamos p_max
    //Calculamos el numero de fitness operaciones permitidas por poblacion
    // Calculamos el numero de generaciones para la primera iteracion
    //Ponemos el contado de generaciones a 0
    //en el main, cuando llegue a 0 actualizar
    // poblacion
    //calcular max generaciones de la poblacion
    //contador de generaciones

    int p_max = calculatePMax();
    int fitness_operations_per_p = calculateFitnessOperations(p_max);
    int generations_for_current_p = calculateGenerations(fitness_operations_per_p, Population::POPULATION_SIZE_INIT);

    int generations_counter = 0;
    int p_reduccions_to_do = p_max - 1;

    double p = 0;

    double eva_maxeva_ratio = 0.0;

    //inicializar poblaci贸n

    cout << "\n correcto \n";
    cout << "INICIALIZAMOS LA POBLACION";

    Population current_population, mutated_population, offspring = Population();
    vector<Individual> current_population_vector, mutated_population_vector, offspring_vector;
    //current_population = FileReader::setPopulationIndividualsFromFile();

    current_population = Population::initializePopulation(UPPER_BOUND, LOWER_BOUND);
    mat mat_current_population = Population::populationToMat(current_population);
    //inicializar parametros

    vector<double> fitness_vector;
    fitness_vector = calculateCECFitness(current_population, Individual::DIMENSION, current_population.getPopulationSize(), number_of_function);
    number_of_fit_eva += fitness_vector.size();
    current_population.assignFitness(fitness_vector);

    cout << "Su media de Fitness respecto al optimo";
    cout << current_population.calculateMeanErrorToOptimumPopulation(number_of_function);

    current_population.sortPopulation();
    current_population.assignGroupToIndividuals(GROUP_SIZE);

    // current_population_size * 2(cr and f)
    std::vector<std::vector<double>> mean_cr_f_values_to_use(current_population.getPopulationSize(), std::vector<double>(2, -1));

    TableFandCR table_mean_cr_f_prob = TableFandCR();


    vector<int> mutation_strategy_to_use(current_population.getPopulationSize(), -1);

    // Crear la tabla de mutacion
    MutationProbabilityTable mutation_probability_table = MutationProbabilityTable(GROUP_SIZE, EVAPORATION_RATE);


    int iteration = 1;
    while (number_of_fit_eva < MAX_FITNESS_EVALUATIONS && !isOptimumIndividualFound(current_population, number_of_function)) {
        generations_counter = generations_counter + 1;

        p = calculateP(number_of_fit_eva, current_population.getPopulationSize());


        mean_cr_f_values_to_use = selectMeanCRFValues(table_mean_cr_f_prob, mean_cr_f_values_to_use, current_population.getPopulationSize(),
                                                      current_population);

        /*
         * create values for f and cr
         */
        for (int ind = 0; ind < current_population.getPopulationSize(); ind++) {
            mean_cr_f_values_to_use[ind][0] = rand_gauss(mean_cr_f_values_to_use[ind][0], 0.05);          // cr
            mean_cr_f_values_to_use[ind][1] = rand_cauchy(mean_cr_f_values_to_use[ind][1], 0.05);        // f
        }
        if (iteration == 31) {
            cout << " asdf";
        }

        mutation_strategy_to_use = selectMutationStrategy(mutation_probability_table, current_population.getPopulationSize(), current_population);
        //cout << "\n2.MUTATE THE POPULATION " << "\n";
        mutated_population = mutate_RAM_JAPDE(current_population, mutation_strategy_to_use, mean_cr_f_values_to_use, p);

        //cout << "\n 3.DO CROSSOVER" << "\n";
        offspring = crossover(current_population, mutated_population, mean_cr_f_values_to_use);


        fitness_vector = calculateCECFitness(offspring, Individual::DIMENSION, current_population.getPopulationSize(), number_of_function);
        number_of_fit_eva += fitness_vector.size();
        offspring.assignFitness(fitness_vector);
        //cout << "Diff to the optimum of the offspring : " << offspring.calculateMeanErrorToOptimumPopulation(number_of_function);

        //cout << "\n Store Tries and Success" << "\n";

        //cout << "\n 4.DO SELECTION" << "\n";
        for (int ind_to_assign_group = 0; ind_to_assign_group < current_population.getPopulationSize(); ind_to_assign_group++) {
            offspring.setGroupToInd(ind_to_assign_group, current_population.getIndividual(ind_to_assign_group).getGroup());
        }
        updateTriesAndSuccessMutTable(current_population, offspring, &mutation_probability_table, mutation_strategy_to_use, number_of_function);
        updateTriesAndSuccessMeanValuesCRF(current_population, offspring, &table_mean_cr_f_prob, mean_cr_f_values_to_use, number_of_function);

        current_population = selection(current_population, offspring, number_of_function);


        if (iteration % 1 == 0) {
            cout << "\n ---------iteration " << iteration << "    diff to the optimum de la poblacion:     "
                 << current_population.calculateMeanErrorToOptimumPopulation(number_of_function) << "\n";
            cout << "\n Fitness Evaluations done to the moment:    " << number_of_fit_eva;
            cout << "\nBest individual of the population diff to the optimum:   "
                 << current_population.bestIndividual().getErrorToOptimum(number_of_function);
            cout << "\n" << ((double) number_of_fit_eva / MAX_FITNESS_EVALUATIONS) * 100 << " % \n \n";

        }


        if (number_of_fit_eva > 18000) {
            cout << "asdf";
        }



        // si es LP_RAM actualizamos
        if ((iteration % LP_RAM) == 0) {
            mutation_probability_table.updateTable();
            mutation_probability_table.resetTripletsKeepProbabilities();

            if (iteration == 2400) {
                cout << "hasd";
            }

            eva_maxeva_ratio = ((double) number_of_fit_eva / MAX_FITNESS_EVALUATIONS);
            table_mean_cr_f_prob.updateTable(eva_maxeva_ratio);
            table_mean_cr_f_prob.resetTripletsKeepProbabilities();
        }



        // Mirar en cuanto se reduce la poblacion
        //int new_population_size = newPopulationSize(number_of_fit_eva);
        //int number_of_ind_to_reduce = numberOfIndividualsToReduce(current_population, new_population_size);
        // Mirar que individuos reducir y reducir la poblacion


        /*if (generations_counter >= generations_for_current_p and p_reduccions_to_do > 0) {
            current_population.reducePopulationInHalf();

            generations_counter = 0;
            p_reduccions_to_do--;

            generations_for_current_p = calculateGenerations(fitness_operations_per_p, current_population.getPopulationSize());


        }*/

        if (iteration == 2) {
            cout << "hasd";
        }


        iteration += 1;


    }
    cout << "\n ---------iteration " << iteration << "    diff to the optimum de la poblacion:     "
         << current_population.calculateMeanErrorToOptimumPopulation(number_of_function) << "\n";
    cout << "\n Fitness Evaluations done to the moment:    " << number_of_fit_eva;
    cout << "\nBest individual of the population diff to the optimum:   "
         << current_population.bestIndividual().getErrorToOptimum(number_of_function);
    return 0;
}
